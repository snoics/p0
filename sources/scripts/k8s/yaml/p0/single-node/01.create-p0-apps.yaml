apiVersion: v1
kind: Namespace   
metadata:
  name: p0
  labels:
    name: p0

---
apiVersion: v1
kind: PersistentVolume
metadata: 
  name: p0-pv
spec: 
  capacity: 
    storage: 10Gi
  volumeMode: Filesystem
  accessModes: 
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: p0-storage
  local: 
    path: /home/p0/disk/p0
  nodeAffinity: 
    required: 
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - test-sample

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
  namespace: p0
  name: p0-pvc
spec: 
  storageClassName: p0-storage
  accessModes: 
  - ReadWriteOnce
  resources: 
    requests: 
      storage: 10Gi

---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: StatefulSet
metadata:
  namespace: p0
  name: p0-app
  labels:
    app: p0-app
spec:
  serviceName: p0-service
  replicas: 1
  selector:
    matchLabels:
      app: p0-app
  template:
    metadata:
      labels:
        app: p0-app
    spec:
      containers:
      - name: mysql-p0
        image: mysql:p0-1.0 # replace it with your exactly <image_name:tags>
        ports:
        - containerPort: 3306
        volumeMounts: 
          - name: p0-disk
            mountPath: /etc/mysql/mysql.conf.d/mysqld.cnf
            subPath: mysql/config/mysqld.cnf
          - name: p0-disk
            mountPath: /opt/p0/mysql/data/db
            subPath: mysql/data/db
          - name: p0-disk
            mountPath: /opt/p0/mysql/data/tmp
            subPath: mysql/data/tmp
          - name: p0-disk
            mountPath: /opt/p0/mysql/logs
            subPath: mysql/logs
      - name: mongo-p0
        image: mongo:p0-1.0 # replace it with your exactly <image_name:tags>
        ports:
        - containerPort: 27017
        args: ["--config","/opt/p0/mongodb/config/mongod.conf"]
        volumeMounts: 
          - name: p0-disk
            mountPath: /opt/p0/mongodb/config
            subPath: mongodb/config
          - name: p0-disk
            mountPath: /opt/p0/mongodb/data
            subPath: mongodb/data
          - name: p0-disk
            mountPath: /opt/p0/mongodb/logs
            subPath: mongodb/logs
      - name: elasticsearch-p0
        image: elasticsearch:p0-1.0 # replace it with your exactly <image_name:tags>
        env:
          - name: cluster.name
            value: elasticsearch
          - name: discovery.type
            value: single-node
        ports:
        - containerPort: 9200
        - containerPort: 9300
        volumeMounts: 
          - name: p0-disk
            mountPath: /usr/share/elasticsearch/config
            subPath: elasticsearch/config
          - name: p0-disk
            mountPath: /usr/share/elasticsearch/data
            subPath: elasticsearch/data
          - name: p0-disk
            mountPath: /opt/p0/elasticsearch/logs
            subPath: elasticsearch/logs
      - name: kibana-p0
        image: kibana:p0-1.0 # replace it with your exactly <image_name:tags>
        env:
          - name: ELASTICSEARCH_HOSTS
            value: http://localhost:9200
        ports:
        - containerPort: 5601
      - name: rabbitmq-p0
        image: rabbitmq:p0-1.0 # replace it with your exactly <image_name:tags>
        ports:
        - containerPort: 4369
        - containerPort: 5672
        - containerPort: 15672
        - containerPort: 25672
        volumeMounts: 
          - name: p0-disk
            mountPath: /etc/rabbitmq/rabbitmq.conf
            subPath: rabbitmq/config/conf/rabbitmq.conf
          - name: p0-disk
            mountPath: /etc/rabbitmq/rabbitmq-env.conf
            subPath: rabbitmq/config/conf/rabbitmq-env.conf
          - name: p0-disk
            mountPath: /opt/rabbitmq_server/var/lib/rabbitmq/mnesia
            subPath: rabbitmq/data/mnesia
          - name: p0-disk
            mountPath: /opt/rabbitmq_server/var/log
            subPath: rabbitmq/logs
      - name: redis-p0
        image: redis:p0-1.0 # replace it with your exactly <image_name:tags>
        ports:
        - containerPort: 6379
        volumeMounts: 
          - name: p0-disk
            mountPath: /opt/p0/redis/config/redis.conf
            subPath: redis/config/redis.conf
          - name: p0-disk
            mountPath: /opt/p0/redis/data
            subPath: redis/data
          - name: p0-disk
            mountPath: /opt/p0/redis/logs
            subPath: redis/logs
      - name: javaapp-p0-mall-admin
        image: p0/mall-admin:p0-1.0 # replace it with your exactly <image_name:tags>
        securityContext:
          privileged: true
        ports:
        - containerPort: 8080
        volumeMounts: 
          - name: p0-disk
            mountPath: /opt/p0/javaapp/bin
            subPath: javaapp/mall-admin/bin
          - name: p0-disk
            mountPath: /opt/p0/javaapp/logs
            subPath: javaapp/mall-admin/logs
      - name: javaapp-p0-mall-search
        image: p0/mall-search:p0-1.0 # replace it with your exactly <image_name:tags>
        securityContext:
          privileged: true
        ports:
        - containerPort: 8081
        volumeMounts: 
          - name: p0-disk
            mountPath: /opt/p0/javaapp/bin
            subPath: javaapp/mall-search/bin
          - name: p0-disk
            mountPath: /opt/p0/javaapp/logs
            subPath: javaapp/mall-search/logs
      - name: javaapp-p0-mall-portal
        image: p0/mall-portal:p0-1.0 # replace it with your exactly <image_name:tags>
        securityContext:
          privileged: true
        ports:
        - containerPort: 8085
        volumeMounts: 
          - name: p0-disk
            mountPath: /opt/p0/javaapp/bin
            subPath: javaapp/mall-portal/bin
          - name: p0-disk
            mountPath: /opt/p0/javaapp/logs
            subPath: javaapp/mall-portal/logs
#      - name: tomcat-p0
#        image: tomcat:p0-1.0 # replace it with your exactly <image_name:tags>
#        ports:ll

#        - containerPort: 8080
#        volumeMounts:
#          - name: p0-disk
#            mountPath: /opt/p0/tomcat/config/catalina.sh
#            subPath: tomcat/config/conf/catalina.sh
#          - name: p0-disk
#            mountPath: /opt/p0/tomcat/config/conf/logging.properties
#            subPath: tomcat/config/conf/logging.properties
#          - name: p0-disk
#            mountPath: /opt/p0/tomcat/config/conf/server.xml
#            subPath: tomcat/config/conf/server.xml
#          - name: p0-disk
#            mountPath: /opt/tomcat/webapps
#            subPath: tomcat/applications
#          - name: p0-disk
#            mountPath: /opt/p0/tomcat/data
#            subPath: tomcat/data
#          - name: p0-disk
#            mountPath: /opt/p0/tomcat/logs
#            subPath: tomcat/logs
      - name: nginx-p0
        image: nginx:p0-1.0 # replace it with your exactly <image_name:tags>
        ports:
        - containerPort: 80
        volumeMounts: 
          - name: p0-disk
            mountPath: /opt/p0/nginx/config/conf
            subPath: nginx/config/conf
          - name: p0-disk
            mountPath: /opt/p0/nginx/applications
            subPath: nginx/applications
          - name: p0-disk
            mountPath: /opt/p0/nginx/data
            subPath: nginx/data
          - name: p0-disk
            mountPath: /opt/p0/nginx/logs
            subPath: nginx/logs
      volumes: 
        - name: p0-disk
          persistentVolumeClaim: 
            claimName: p0-pvc

---
apiVersion: v1
kind: Service
metadata:
  namespace: p0
  name: p0-svc #TODO: to specify your service name
  labels:
    app: p0-svc
spec:
  selector:
    app: p0-app #TODO: change label selector to match your backend pod
  ports:
  - protocol: TCP
    name: mysql-server-3306
    #容器暴露的端口
    port: 3306 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 3306
  - protocol: TCP
    name: mongodb-server-27017
    #容器暴露的端口
    port: 27017 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 27017
  - protocol: TCP
    name: elasticsearch-server-9200
    #容器暴露的端口
    port: 9200 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 9200
  - protocol: TCP
    name: elasticsearch-server-9300
    #容器暴露的端口
    port: 9300 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 9300
  - protocol: TCP
    name: kibana-server-5601
    #容器暴露的端口
    port: 5601 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 5601
  - protocol: TCP
    name: rabbitmq-server-5672
    #容器暴露的端口
    port: 5672 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 5672
  - protocol: TCP
    name: rabbitmq-server-15672
    #容器暴露的端口
    port: 15672 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 15672
  - protocol: TCP
    name: redis-server-6379
    #容器暴露的端口
    port: 6379 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 6379
  - protocol: TCP
    name: javaapp-mall-admin-8080
    #容器暴露的端口
    port: 8080 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 8080
  - protocol: TCP
    name: javaapp-mall-search-8081
    #容器暴露的端口
    port: 8081 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 8081
  - protocol: TCP
    name: javaapp-mall-portal-8085
    #容器暴露的端口
    port: 8085 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 8085
#  - protocol: TCP
#    name: tomcat-server-8080
#    #容器暴露的端口
#    port: 8080 #TODO: choose an unique port on each node to avoid port conflict
#    #真实的服务部署端口
#    targetPort: 8080
  - protocol: TCP
    name: http-server
    #容器暴露的端口
    port: 90 #TODO: choose an unique port on each node to avoid port conflict
    #真实的服务部署端口
    targetPort: 80
  clusterIP: None
#  type: NodePort

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  namespace: p0
  annotations:
    nginx.ingress.kubernetes.io/service-weight: ''
  name: p0-ingress
spec:
  rules:
    - host: p0.yzone01.com
      http:
        paths:
          - backend:
              serviceName: p0-svc
              servicePort: 90
            path: /
    - host: mq-p0.yzone01.com
      http:
        paths:
          - backend:
              serviceName: p0-svc
              servicePort: 15672
            path: /
    - host: kibana-p0.yzone01.com
      http:
        paths:
          - backend:
              serviceName: p0-svc
              servicePort: 5601
            path: /